#include <stdio.h>
#include <conio.h>
#include <string.h>

// Structure for storing information about a single bus
typedef struct tagITEM {
  int numberroute;
  int busfleetnumber;
  int starttime; 
  int endtime;
  int routekm;
} ITEM;
// Array for a maximum of 100 buses
    ITEM Bus[100];
// Number of occupied elements in the array
    int Number = 0;

// A function to display all of the elements
void Print( void ) {
  int i;
    printf("╔═══╦═══════════╦══════════════╦═════════╦═══════╦═══════╗\n");
    printf("║ N ║NumberRoute║BusFleetNumber║StartTime║EndTime║RouteKm║\n");
  for (i = 0; i < Number; i++) {
      printf ("╠═══╬═══════════╬══════════════╬═════════╬═══════╬═══════╣\n");
    printf("║%3i║%11i║%14i║%9i║%7i║%7i║\n",
    i + 1, Bus[i].numberroute, Bus[i].busfleetnumber,
           Bus[i].starttime, Bus[i].endtime, Bus[i].routekm);
  }
  printf ("╚═══╩═══════════╩══════════════╩═════════╩═══════╩═══════╝\n");
} // End of 'Print' function

// Function for adding an element
void Add( void ) {
char a;
  if (Number == 99)
  {
    fprintf(stderr, "You can't add another element\n");
    return;
  }

  printf ("╔══════════════════════════╗\n");
  printf ("║Enter number route >      ║\n");
  printf ("╚══════════════════════════╝\n");
  do {
    a = getchar();
    Bus[Number].numberroute) = a;
    } while (a != '\n');
  //scanf("%i", &Bus[Number].numberroute);
  printf ("╔══════════════════════════╗\n");
  printf ("║Enter bus fleet number >  ║\n");
  printf ("╚══════════════════════════╝\n");
  do {
    a = getchar();
    Bus[Number].busfleetnumber) = a;
    } while (a != '\n');
  //scanf("%i", &Bus[Number].busfleetnumber);
  printf ("╔══════════════════════════╗\n");
  printf ("║Enter start time >        ║\n");
  printf ("╚══════════════════════════╝\n");
  do {
    a = getchar();
    Bus[Number].starttime) = a;
    } while (a != '\n');
  //scanf("%i", &Bus[Number].starttime);
  printf ("╔══════════════════════════╗\n");
  printf ("║Enter end time >          ║\n");
  printf ("╚══════════════════════════╝\n");
  do {
    a = getchar();
    Bus[Number].endtime) = a;
    } while (a != '\n');
  //scanf("%i", &Bus[Number].endtime);
  printf ("╔══════════════════════════╗\n");
  printf ("║Enter route in km >       ║\n");
  printf ("╚══════════════════════════╝\n");
  do {
    a = getchar();
    Bus[Number].routekm) = a;
    } while (a != '\n');
  //scanf("%i", &Bus[Number].routekm);

  Number++;
} // End of 'Add' function

// Function for deleting an element
void Del( void )
{
  int i;
  char d;

  Print();
  printf("Enter the number of the item to delete > ");
  do {
    d = getchar();
    i = d;
    } while (d != '\n');
  //scanf("%i", &i);
  if (i < 1 || i > Number)
  {
    fprintf(stderr, "The element with the number %i does not exist\n", i);
    return;
  }

  for (i--; i < Number - 1; i++)
    Bus[i] = Bus[i + 1];

  Number --;
} // End of 'Del' function

//Function change information
void Change (void) {
    char a;
    int tapok, Num = 0;
    Print();
    printf ("╔════════════════════════════════════════════════════════════╗\n");
    printf ("║                                                            ║\n");
    printf ("║    Enter the line number where you want to make changes    ║\n");
    printf ("║                                                            ║\n");
    printf ("╚════════════════════════════════════════════════════════════╝\n");
    do {
    a = getchar();
    Num = a;
    } while (a != '\n');
    //scanf ("%d", &Num);
    printf ("╔════════════════════════════════════════════════════════════╗\n");
    printf ("║                                                            ║\n");
    printf ("║         Enter the desired character to change:             ║\n");
    printf ("║                                                            ║\n");
    printf ("╠════════════════════════════════════════════════════════════╣\n");
    printf ("║                                                            ║\n");
    printf ("║                 1 > Number Route                           ║\n");
    printf ("║                 2 > Bus Fleet Number                       ║\n");
    printf ("║                 3 > Start Time                             ║\n");
    printf ("║                 4 > End Time                               ║\n");
    printf ("║                 5 > Route in KM                            ║\n");
    printf ("║                                                            ║\n");
    printf ("╚════════════════════════════════════════════════════════════╝\n");
    do {
    a = getchar();
    tapok = a;
    } while (a != '\n');
    //scanf ("%d", tapok);
    switch (tapok) {
        case '1':
        scanf ("%d", &Bus[Num].numberroute);
        break;
        case '2':
        scanf ("%d", &Bus[Num].busfleetnumber);
        break;
        case '3':
        scanf ("%d", &Bus[Num].starttime);
        break;
        case '4':
        scanf ("%d", &Bus[Num].endtime);
        break;
        case '5':
        scanf ("%d", &Bus[Num].routekm);
        break;
    }
} 

// Function for ordering an array by number route
void SortNumberRoute( void )
{
  int i, j;
  ITEM Temp;

  for (j = Number - 1; j > 0; j --)
    for (i = 0; i < j; i ++)
      if ((Bus[i].numberroute > Bus[i + 1].numberroute) > 0)
      {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
} // End of 'SortNumberRoute' function

// Function for ordering an array by number route
void SortNumberRouteUbyvanie( void )
{
  int i, j;
  ITEM Temp;

  for (j = Number - 1; j > 0; j --)
    for (i = 0; i < j; i ++)
      if ((Bus[i].numberroute < Bus[i + 1].numberroute) > 0)
      {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
} // End of 'SortNumberRouteUbyvanie' function

// Function for ordering an array by bus fleet number
void SortBusFleetNumber( void )
{
  int i, j;
  ITEM Temp;

  for (j = Number - 1; j > 0; j --)
    for (i = 0; i < j; i ++)
      if ((Bus[i].busfleetnumber > Bus[i + 1].busfleetnumber) > 0)
      {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
} // End of 'SortBusFleetNumber' function

// Function for ordering an array by bus fleet number
void SortBusFleetNumberUbyvanie( void )
{
  int i, j;
  ITEM Temp;

  for (j = Number - 1; j > 0; j --)
    for (i = 0; i < j; i ++)
      if ((Bus[i].busfleetnumber < Bus[i + 1].busfleetnumber) > 0)
      {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
} // End of 'SortBusFleetNumberUbyvanie' function

// Function for ordering an array by start time
void SortStartTime( void )
{
  int i, j;
  ITEM Temp;

  for (j = Number - 1; j > 0; j --)
    for (i = 0; i < j; i ++)
      if ((Bus[i].starttime > Bus[i + 1].starttime) > 0)
      {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
} // End of 'SortStartTime' function

// Function for ordering an array by start time
void SortStartTimeUbyvanie( void )
{
  int i, j;
  ITEM Temp;

  for (j = Number - 1; j > 0; j --)
    for (i = 0; i < j; i ++)
      if ((Bus[i].starttime < Bus[i + 1].starttime) > 0)
      {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
} // End of 'SortStartTimeUbyvanie' function

// Function for ordering an array by end time
void SortEndTime( void )
{
  int i, j;
  ITEM Temp;

  for (j = Number - 1; j > 0; j --)
    for (i = 0; i < j; i ++)
      if ((Bus[i].endtime > Bus[i + 1].endtime) > 0)
      {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
} // End of 'SortEndTime' function

// Function for ordering an array by end time
void SortEndTimeUbyvanie( void )
{
  int i, j;
  ITEM Temp;

  for (j = Number - 1; j > 0; j --)
    for (i = 0; i < j; i ++)
      if ((Bus[i].endtime < Bus[i + 1].endtime) > 0)
      {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
} // End of 'SortEndTimeUbyvanie' function

// Function for ordering an array by route in KM
void SortRouteKM( void )
{
  int i, j;
  ITEM Temp;

  for (j = Number - 1; j > 0; j --)
    for (i = 0; i < j; i ++)
      if ((Bus[i].routekm > Bus[i + 1].routekm) > 0)
      {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
} // End of 'SortRouteKM' function

// Function for ordering an array by route in KM
void SortRouteKMUbyvanie( void )
{
  int i, j;
  ITEM Temp;

  for (j = Number - 1; j > 0; j --)
    for (i = 0; i < j; i ++)
      if ((Bus[i].routekm < Bus[i + 1].routekm) > 0)
      {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
} // End of 'SortRouteKMUbyvanie' function

// Function for reading an array from a file
void Load( void )
{
  FILE *F;
  int i;

  if ((F = fopen("task1.dat", "rt")) == NULL)
  {
    fprintf(stderr, "The file cannot be opened for reading 'task1.dta'\n");
    return;
  }

  fscanf(F, "%i", &Number);
  for (i = 0; i < Number; i++)
    fscanf(F, "%i\n%i\n%i\n%i\n%i\n", &Bus[i].numberroute, &Bus[i].busfleetnumber,
    &Bus[i].starttime, &Bus[i].endtime, &Bus[i].routekm);

  fclose(F);
} // End of 'Load' function

// Function for saving an array in a file
void Save( void )
{
  FILE *F;
  int i;

  if ((F = fopen("task1.dat", "wt")) == NULL)
  {
    fprintf(stderr, "The file cannot be opened for writing 'task1.dta'\n");
    return;
  }

  fprintf(F, "%i\n", Number);
  for (i = 0; i < Number; i++)
    fprintf(F, "%i\n%i\n%i\n%i\n%i\n", Bus[i].numberroute, Bus[i].busfleetnumber,
    Bus[i].starttime, Bus[i].endtime, Bus[i].routekm);

  fclose(F);
} // End of 'Save' function

// Display the menu and read the number of the selected item
int Menu( void )
{
  int c = 0;

  while ((c < '0' || c > '7') && c != 27)
  {
    printf("╒══════════════════════╕\n"
           "│    0 : Exit          │\n"
           "╞══════════════════════╡\n"
           "│    1 : Add           │\n"
           "╞══════════════════════╡\n"
           "│    2 : Save in file  │\n"
           "╞══════════════════════╡\n"
           "│    3 : Download      │\n"
           "╞══════════════════════╡\n"
           "│    4 : Print         │\n"
           "╞══════════════════════╡\n"
           "│    5 : Sort          │\n"
           "╞══════════════════════╡\n"
           "│    6 : Delete        │\n"
           "╞══════════════════════╡\n"
           "│    7 : Change        │\n"
           "╘══════════════════════╛\n");
    c = getchar ();
    fflush(stdin);
    //printf("%c\n", c);
  }
  return c;
} /* End of 'Menu' function */

int MenuSortChoice (void) {
    int c = 0;
    
    while ((c < '0' || c > '1') && c != 27) {
        printf ("╔══════════════════════════════════╗\n");
        printf ("║      Select the sort type:       ║\n");
        printf ("╠════════════════╦╦════════════════╣\n");
        printf ("║  0 - Decrease  ║║  1 - Increase  ║\n");
        printf ("╚════════════════╩╩════════════════╝\n");
        c = getchar ();
        fflush(stdin);
    }
    return c;
}

// Display the menu and read the number of the selected item sort
int MenuSort( void )
{
  int c = 0;

  while ((c < '0' || c > '5') && c != 27)
  {
    printf("╒════════════════════════════╕\n"
           "│    0 : Return              │\n"
           "╞════════════════════════════╡\n"
           "│    1 : Number Route        │\n"
           "╞════════════════════════════╡\n"
           "│    2 : Bus Fleet Number    │\n"
           "╞════════════════════════════╡\n"
           "│    3 : Start Time          │\n"
           "╞════════════════════════════╡\n"
           "│    4 : End Time            │\n"
           "╞════════════════════════════╡\n"
           "│    5 : Route KM            │\n"
           "╘════════════════════════════╛\n");
    c = getchar ();
    fflush(stdin);
  }
  return c;
} // End of 'MenuSort' function

// Display the menu and read the number of the selected item sort
int MenuSortD( void )
{
  int c = 0;

  while ((c < '0' || c > '5') && c != 27)
  {
    printf("╒════════════════════════════╕\n"
           "│    0 : Return              │\n"
           "╞════════════════════════════╡\n"
           "│    1 : Number Route        │\n"
           "╞════════════════════════════╡\n"
           "│    2 : Bus Fleet Number    │\n"
           "╞════════════════════════════╡\n"
           "│    3 : Start Time          │\n"
           "╞════════════════════════════╡\n"
           "│    4 : End Time            │\n"
           "╞════════════════════════════╡\n"
           "│    5 : Route KM            │\n"
           "╘════════════════════════════╛\n");
    c = getchar ();
    fflush(stdin);
  }
  return c;
} // End of 'MenuSortD' function

// The function of the main menu
void main( void )
{
  int Selection;

  while ((Selection = Menu()) != '0' && Selection != 27)
    switch (Selection)
    {
    case '1':
      Print();
      Add();
      break;
    case '2':
      Print();
      Save();
      break;
    case '3':
      Print();
      Load();
      break;
    case '4':
      Print();
      break;
    case '5':
      MenuSortChoice();
      Print();
      break;
    case '6':
      Del();
      Print();
      break;
    case '7':
      Change();
      Print();
      break;
    }
} // End the function of the main menu

void TypeSort (void) {
    int Selection;
    
    while ((Selection = MenuSortChoice()) != '0' && Selection != 27)
    switch (Selection) {
        case '0':
        MenuSort();
        break;
        case '1':
        MenuSortD();
        break;
    }
}

// Sorting menu function
void mainsort( void )
{
  int Selection;

  while ((Selection = MenuSort()) != '0' && Selection != 27)
    switch (Selection)
    {
    case '0':
      main();
      break;
    case '1':
      SortNumberRoute();
      Print();
      break;
    case '2':
      SortBusFleetNumber();
      Print();
      break;
    case '3':
      SortStartTime();
      Print();
      break;
    case '4':
      SortEndTime();
      Print();
      break;
    case '5':
      SortRouteKM();
      Print();
      break;
    }
} //End sorting menu function

int mainsortD (void) {
    int Selection;
    while ((Selection = MenuSortD()) != '0' && Selection != 27)
    switch (Selection) {
        case '0':
          main();
          break;
        case '1':
          SortNumberRouteUbyvanie();
          Print();
          break;
        case '2':
          SortBusFleetNumberUbyvanie();
          Print();
          break;
        case '3':
          SortStartTimeUbyvanie();
          Print();
          break;
        case '4':
          SortEndTimeUbyvanie();
          Print();
          break;
        case '5':
          SortRouteKMUbyvanie();
          Print();
          break;
    }
}
