#include <stdio.h>
#include <string.h>

// Structure for storing information about a single bus
typedef struct tagITEM { //Setting a structure with information about buses
  int numberroute; // Here you can enter an array of characters (a string) with the route number
  int busfleetnumber; // Here you can enter an array of characters (a string) with the bus fleet number
  int starttimech;
  int starttimem;// Here you can enter an array of characters (a string) with the start time
  int endtimech;
  int endtimem;//Here you can enter an array of characters (a string) with the end time
  int routekm; //Here you can enter an array of characters with the all route in KM
} ITEM; // Setting a name for the structure type "ITEM"
//!RouteKM ввод в метрах приводить к км
// Array for a maximum of 100 buses
    ITEM Bus[100];
// Number of occupied elements in the array
    int Number = 0;

// A function to display all of the elements
void Print( void ) {
  int i; //Setting the counter
    printf("╔═══╦═══════════╦══════════════╦═════════╦═══════╦═══════╗\n"); //"Header" of the graphic
    printf("║ N ║NumberRoute║BusFleetNumber║StartTime║EndTime║RouteKm║\n"); //table when output
  for (i = 0; i < Number; i++) { //Setting the "for" counter to output array elements by number
      printf ("╠═══╬═══════════╬══════════════╬═════════╬═══════╬═══════╣\n");
    printf("║%3i║%11i║%14i║    %02i:%02i║  %02i:%02i║%7i║\n",
    i + 1, Bus[i].numberroute, Bus[i].busfleetnumber,
           Bus[i].starttimech, Bus[i].starttimem, Bus[i].endtimech,
           Bus[i].endtimem, Bus[i].routekm);
  }
  printf ("╚═══╩═══════════╩══════════════╩═════════╩═══════╩═══════╝\n"); //End of the graphic table
} // End of 'Print' function

// Function for adding an element
void Add( void ) {
char a;
int i = 0, ch = 0, dh = 0; ////Setting the counter
  if (Number == 99)
  {
    fprintf(stderr, "You can't add another element\n");
    return;
  }
  putchar ('\n');
  printf ("╔══════════════════════════╗\n");
  printf ("║Enter number route >      ║\n");
  printf ("╚══════════════════════════╝\n");
  while (dh != 1) {
    a = getchar();
    while (a != '\n') {
        if ((a > 57) || (a < 48)) {
          while ((a > 57) || (a < 48)) {
            if (a != '\n') fprintf(stderr, "Only numbers\n");
            a = getchar();
          }
        }
        a = a - 48;
        ch = ch * 10 + a;
        putchar(a);
        dh = 1;
        a = getchar();
        if (ch > 9999) {
          fprintf (stderr, "Overflow\n");
          dh = 0;
          ch = 0;
          fflush(stdin);
        }
    }
  }
  Bus[Number].numberroute = ch;
  putchar ('\n');
  fflush(stdin);
  dh = 0;
  printf ("╔══════════════════════════╗\n");
  printf ("║Enter bus fleet number >  ║\n");
  printf ("╚══════════════════════════╝\n");
  while (dh != 1) {
    a = getchar();
    while (a != '\n') {
        if ((a > 57) || (a < 48)) {
          while ((a > 57) || (a < 48)) {
            if (a != '\n') fprintf(stderr, "Only numbers\n");
            a = getchar();
          }
        }
        a = a - 48;
        ch = ch * 10 + a;
        putchar(a);
        a = getchar();
        dh = 1;
        if (ch > 9999999999999) {
          fprintf (stderr, "Overflow\n");
          dh = 0;
          ch = 0;
        }
    }
  }
  Bus[Number].busfleetnumber = ch;
  putchar ('\n');
  ch = 0;
  dh = 0;
  printf ("╔══════════════════════════╗\n");
  printf ("║Enter start time >        ║\n");
  printf ("╚══════════════════════════╝\n");
  while (dh != 1) {
  a = getchar();
    while (a != '\n') {
        if ((a > 57) || (a < 48)) {
          while ((a > 57) || (a < 48)) {
            if (a != '\n') fprintf(stderr, "Only numbers\n");
            a = getchar();
          }
        }
        a = a - 48;
        ch = ch * 10 + a;
        putchar(a);
        dh = 1;
        //if ((a > 57-48) || (a < 48-48)) {
        //    fprintf(stderr, "Only numbers.\n");
        //    dh = 0;
        //    ch = 0;
        //    while ((a > 57) || (a < 48)) {
        //        //a = getchar();
        //        fflush (stdin);
        //        a = getchar();
        //    //putchar(a);
        //    }
        //}
        a = getchar();
        if (ch > 23) {
            fprintf(stderr, "The clock (hours) cannot be more than 23.\n");
            dh = 0;
            ch = 0;
        } else if (ch < 0) {
          fprintf(stderr, "Hours (hours) cannot be less than 00.\n");
            dh = 0;
            ch = 0;
        }
    }
  }
    Bus[Number].starttimech = ch;
    putchar('\n');
    dh = 0;
    ch = 0;
  while (dh != 1) {
    a = getchar();
    while (a != '\n') {
        if ((a > 57) || (a < 48)) {
          while ((a > 57) || (a < 48)) {
            if (a != '\n') fprintf(stderr, "Only numbers\n");
            a = getchar();
          }
        }
        a = a - 48;
        ch = ch * 10 + a;
        putchar(a);
        a = getchar();
        dh = 1;
        if (ch > 59) {
          printf ("The clock (minutes) cannot be more than 59.\n");
          dh = 0;
          ch = 0;
        }
        if (ch < 0) {
          printf ("Hours (minutes) cannot be less than 00.\n");
          dh = 0;
          ch = 0;
        }
    }
  }
    Bus[Number].starttimem = ch;
    putchar('\n');
  ch = 0;
  dh = 0;
    printf ("╔══════════════════════════╗\n");
    printf ("║Enter end time >          ║\n");
    printf ("╚══════════════════════════╝\n");
  while (dh != 1) {
    a = getchar();
    while (a != '\n') {
        if ((a > 57) || (a < 48)) {
          while ((a > 57) || (a < 48)) {
            if (a != '\n') fprintf(stderr, "Only numbers\n");
            a = getchar();
          }
        }
        a = a - 48;
        ch = ch * 10 + a;
        putchar(a);
        dh = 1;
        a = getchar();
        if (ch > 23) {
            fprintf(stderr, "The clock (hours) cannot be more than 23.\n");
            dh = 0;
            ch = 0;
        } else if (ch < 0) {
            fprintf(stderr, "Hours (hours) cannot be less than 00.\n");
            dh = 0;
            ch = 0;
        }
        if (ch == Bus[Number].starttimech) {
            fprintf(stderr, "The interval between departure and arrival hoursis at least an hour!\n");
            dh = 0;
            ch = 0;
        }
    }
  }
    Bus[Number].endtimech = ch;
    putchar('\n');
    dh = 0;
    ch = 0;
  while (dh != 1) {
    a = getchar();
    while (a != '\n') {
        if ((a > 57) || (a < 48)) {
          while ((a > 57) || (a < 48)) {
            if (a != '\n') fprintf(stderr, "Only numbers\n");
            a = getchar();
          }
        }
        a = a - 48;
        ch = ch * 10 + a;
        putchar(a);
        a = getchar();
        dh = 1;
        if (ch > 59) {
          printf ("The clock (minutes) cannot be more than 59.\n");
          dh = 0;
          ch = 0;
        }
        if (ch < 0) {
          printf ("Hours (minutes) cannot be less than 00.\n");
          dh = 0;
          ch = 0;
        }
    }
  }
    Bus[Number].endtimem = ch;
    putchar('\n');
    dh = 0;
    ch = 0;
  printf ("╔══════════════════════════╗\n");
  printf ("║Enter route in m >        ║\n");
  printf ("╚══════════════════════════╝\n");
  while (dh != 1) {
    a = getchar();
    while (a != '\n') {
      if ((a > 57) || (a < 48)) {
          while ((a > 57) || (a < 48)) {
            if (a != '\n') fprintf(stderr, "Only numbers\n");
            a = getchar();
          }
      }
      a = a - 48;
      ch = ch * 10 + a;
      putchar(a);
      a = getchar();
      dh = 1;
        if (ch > 999999) {
          fprintf (stderr, "Overflow\n");
          dh = 0;
          ch = 0;
        }
    }
  }
  ch = ch / 1000;
  Bus[Number].routekm = ch;
  //Bus[Number].routekm = '\0';
  putchar ('\n');

  Number++;
} // End of 'Add' function

// Function for deleting an element
void Del( void )
{
  char i; //Setting the counter
  char d, dt;

  Print();
  printf("Enter the number of the item to delete > ");
  i = getchar();
      i = i - 48;
      putchar(d);
  if (i < 0 || i > Number)
  {
    fprintf(stderr, "The element with the number %i does not exist\n", i);
    return;
  }

  for (i--; i < Number - 1; i++)
    Bus[i] = Bus[i + 1];

  Number --;
  Print();
} // End of 'Del' function

//Function change information
void Change (void) {
    char a, ch;
    int tapok = 0, Num = 0; //Setting the counters
    Print();
    printf ("╔════════════════════════════════════════════════════════════╗\n");
    printf ("║                                                            ║\n");
    printf ("║    Enter the line number where you want to make changes    ║\n");
    printf ("║                                                            ║\n");
    printf ("╚════════════════════════════════════════════════════════════╝\n");
    a = getchar();
    while (a != '\n') {
      a = a - 48;
      Num = Num * 10 + a;
      putchar (a);
      a = getchar();
    }
    putchar ('\n');
    while ((a < 49 || a > 53) && a != 27) {
        printf ("╔════════════════════════════════════════════════════════════╗\n");
        printf ("║                                                            ║\n");
        printf ("║         Enter the desired character to change:             ║\n");
        printf ("║                                                            ║\n");
        printf ("╠════════════════════════════════════════════════════════════╣\n");
        printf ("║                                                            ║\n");
        printf ("║                 1 > Number Route                           ║\n");
        printf ("║                 2 > Bus Fleet Number                       ║\n");
        printf ("║                 3 > Start Time                             ║\n");
        printf ("║                 4 > End Time                               ║\n");
        printf ("║                 5 > Route in KM                            ║\n");
        printf ("║                                                            ║\n");
        printf ("╚════════════════════════════════════════════════════════════╝\n");
        a = getchar();
        tapok = a;
          putchar (a);
    putchar ('\n');
    }
    switch (tapok) {
        case 49:
        a = getchar();
        while (a != '\n') {
          a = a - 48;
          ch = ch * 10 + a;
          putchar(a);
          a = getchar();
        }
        Bus[Num].numberroute = ch;
        putchar ('\n');
        break;
        case 50:
        a = getchar();
        while (a != '\n') {
          a = a - 48;
          ch = ch * 10 + a;
          putchar(a);
          a = getchar();
        }
        Bus[Num].busfleetnumber = ch;
        putchar ('\n');
        break;
        case 51:
        a = getchar();
        while (a != '\n') {
          a = a - 48;
          ch = ch * 10 + a;
          putchar(a);
          a = getchar();
        }
        Bus[Num].starttimech = ch;
        putchar ('\n');
        ch = 0;
        a = getchar();
        while (a != '\n') {
          a = a - 48;
          ch = ch * 10 + a;
          putchar(a);
          a = getchar();
        }
        Bus[Num].starttimem = ch;
        putchar ('\n');
        break;
        case 52:
        a = getchar();
        while (a != '\n') {
          a = a - 48;
          ch = ch * 10 + a;
          putchar(a);
          a = getchar();
        }
        Bus[Num].endtimech = ch;
        ch = 0;
        a = getchar();
        while (a != '\n') {
          a = a - 48;
          ch = ch * 10 + a;
          putchar(a);
          a = getchar();
        }
        Bus[Num].endtimem = ch;
        putchar ('\n');
        break;
        case 53:
        a = getchar();
        while (a != '\n') {
          a = a - 48;
          ch = ch * 10 + a;
          putchar(a);
          a = getchar();
        }
        Bus[Num].routekm = ch;
        putchar ('\n');
        break;
    }
    Print();
} 

// Function for ordering an array by number route
void SortNumberRoute( void ) {
  int i, j; //Setting the counters
  ITEM Temp;

  for (j = Number - 1; j > 0; j --) {
    for (i = 0; i < j; i ++) {
      if ((Bus[i].numberroute > Bus[i + 1].numberroute) > 0) {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
    }
  }
  Print();
} // End of 'SortNumberRoute' function

// Function for ordering an array by number route
void SortNumberRouteUbyvanie( void ) {
  int i, j; //Setting the counters
  ITEM Temp;

  for (j = Number - 1; j > 0; j --) {
    for (i = 0; i < j; i ++) {
      if ((Bus[i].numberroute < Bus[i + 1].numberroute) > 0) {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
    }
  }
  Print();
} // End of 'SortNumberRouteUbyvanie' function

// Function for ordering an array by bus fleet number
void SortBusFleetNumber( void ) {
  int i, j; //Setting the counters
  ITEM Temp;

  for (j = Number - 1; j > 0; j --) {
    for (i = 0; i < j; i ++) {
      if (Bus[i].busfleetnumber > Bus[i + 1].busfleetnumber > 0) {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
    }
  }
  Print();
} // End of 'SortBusFleetNumber' function

// Function for ordering an array by bus fleet number
void SortBusFleetNumberUbyvanie( void ) {
  int i, j; //Setting the counters
  ITEM Temp;

  for (j = Number - 1; j > 0; j --) {
    for (i = 0; i < j; i ++) {
      if (Bus[i].busfleetnumber < Bus[i + 1].busfleetnumber > 0) {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
    }
  }
  Print();
} // End of 'SortBusFleetNumberUbyvanie' function

// Function for ordering an array by start time
void SortStartTime( void ) {
  int i, j; //Setting the counters
  ITEM Temp;

  for (j = Number - 1; j > 0; j --) {
    for (i = 0; i < j; i ++) {
      if ((Bus[i].starttimech > Bus[i + 1].starttimech) > 0) {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
    }
  }
  Print();
} // End of 'SortStartTime' function

// Function for ordering an array by start time
void SortStartTimeUbyvanie( void ) {
  int i, j; //Setting the counters
  ITEM Temp;

  for (j = Number - 1; j > 0; j --) {
    for (i = 0; i < j; i ++) {
      if ((Bus[i].starttimech < Bus[i + 1].starttimech) > 0) {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
    }
  }
  Print();
} // End of 'SortStartTimeUbyvanie' function

// Function for ordering an array by end time
void SortEndTime( void ) {
  int i, j; //Setting the counters
  ITEM Temp;

  for (j = Number - 1; j > 0; j --) {
    for (i = 0; i < j; i ++) {
      if ((Bus[i].endtimech > Bus[i + 1].endtimech) > 0) {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
    }
  }
  Print();
} // End of 'SortEndTime' function

// Function for ordering an array by end time
void SortEndTimeUbyvanie( void ) {
  int i, j; //Setting the counters
  ITEM Temp;

  for (j = Number - 1; j > 0; j --) {
    for (i = 0; i < j; i ++) {
      if ((Bus[i].endtimech < Bus[i + 1].endtimech) > 0) {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
    }
  }
  Print();
} // End of 'SortEndTimeUbyvanie' function

// Function for ordering an array by route in KM
void SortRouteKM( void ) {
  int i, j; //Setting the counters
  ITEM Temp;

  for (j = Number - 1; j > 0; j --) {
    for (i = 0; i < j; i ++) {
      if ((Bus[i].routekm > Bus[i + 1].routekm) > 0) {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
    }
  }
  Print();
} // End of 'SortRouteKM' function

// Function for ordering an array by route in KM
void SortRouteKMUbyvanie( void ) {
  int i, j; //Setting the counters
  ITEM Temp;

  for (j = Number - 1; j > 0; j --) {
    for (i = 0; i < j; i ++) {
      if ((Bus[i].routekm < Bus[i + 1].routekm) > 0) {
        Temp = Bus[i];
        Bus[i] = Bus[i + 1];
        Bus[i + 1] = Temp;
      }
    }
  }
  Print();
} // End of 'SortRouteKMUbyvanie' function

// Function for reading an array from a file
void Load( void )
{
  FILE *F;
  int i; //Setting the counter

  if ((F = fopen("task1.dat", "rt")) == NULL)
  {
    fprintf(stderr, "The file cannot be opened for reading 'task1.dta'\n");
    return;
  }

  fscanf(F, "%i", &Number);
  for (i = 0; i < Number; i++)
    fscanf(F, "%i\n%i\n%02i:%02i\n%02i:%02\n%i\n", &Bus[i].numberroute, 
    &Bus[i].busfleetnumber, &Bus[i].starttimech, &Bus[i].starttimem, 
    &Bus[i].endtimech, &Bus[i].endtimem, &Bus[i].routekm);

  fclose(F);
} // End of 'Load' function

// Function for saving an array in a file
void Save( void )
{
  FILE *F;
  int i; //Setting the counter

  if ((F = fopen("task1.dat", "wt")) == NULL)
  {
    fprintf(stderr, "The file cannot be opened for writing 'task1.dta'\n");
    return;
  }

  fprintf(F, "%i\n", Number);
  for (i = 0; i < Number; i++)
    fprintf(F, "%i\n%i\n%02i:%02i\n%02i:%02\n%i\n", Bus[i].numberroute,
    Bus[i].busfleetnumber, Bus[i].starttimech, Bus[i].starttimech,
    Bus[i].endtimech, Bus[i].endtimem, Bus[i].routekm);
//Убрала звездочки
  fclose(F);
} // End of 'Save' function

// Display the menu and read the number of the selected item
int Menu( void ) {
  char c, k = 0;
  int i = 0; //Setting the counter
  c = 0;
  while ((c < 48 || c > 55) && c != 27)
  {
    printf("╒══════════════════════╕\n"
           "│    0 : Exit          │\n"
           "╞══════════════════════╡\n"
           "│    1 : Add           │\n"
           "╞══════════════════════╡\n"
           "│    2 : Save in file  │\n"
           "╞══════════════════════╡\n"
           "│    3 : Download      │\n"
           "╞══════════════════════╡\n"
           "│    4 : Print         │\n"
           "╞══════════════════════╡\n"
           "│    5 : Sort          │\n"
           "╞══════════════════════╡\n"
           "│    6 : Delete        │\n"
           "╞══════════════════════╡\n"
           "│    7 : Change        │\n"
           "╘══════════════════════╛\n");
    k = getchar();
    while (k != '\n') {
      c = k;
      putchar (k);
      k = getchar();
    }
    putchar ('\n');
    fflush(stdin);
    //printf("%c\n", c);
  }
  return c;
} /* End of 'Menu' function */

int MenuSortChoice (void) {
    char p = 0, k = 0;
    while ((p < 49 || p > 50) && p != 27) {
        printf ("╔══════════════════════════════════╗\n");
        printf ("║      Select the sort type:       ║\n");
        printf ("╠════════════════╦╦════════════════╣\n");
        printf ("║  1 - Decrease  ║║  2 - Increase  ║\n");
        printf ("╚════════════════╩╩════════════════╝\n");
        k = getchar();
        //while (k != '\n') {
          p = k;
        //  putchar (k);
        //  k = getchar();
        //}
        //putchar ('\n');
        fflush(stdin);
    }
    return p;
}

int MenuSort( void )
{
  char c, k = 0;
  c = 0;

  while ((c < 49 || c > 54) && c != 27)
  {
    printf("╒════════════════════════════╕\n"
           "│    1 : Return              │\n"
           "╞════════════════════════════╡\n"
           "│    2 : Number Route        │\n"
           "╞════════════════════════════╡\n"
           "│    3 : Bus Fleet Number    │\n"
           "╞════════════════════════════╡\n"
           "│    4 : Start Time          │\n"
           "╞════════════════════════════╡\n"
           "│    5 : End Time            │\n"
           "╞════════════════════════════╡\n"
           "│    6 : Route KM            │\n"
           "╘════════════════════════════╛\n");
    k = getchar();
    //while (k != '\n') {
      c = k;
      putchar (k);
    //  k = getchar();
    //}
    putchar ('\n');
    fflush(stdin);
  }
  return c;
} // End of 'MenuSort' function

// Display the menu and read the number of the selected item sort
int MenuSortD( void )
{
  char c, k = 0;
  c = 0;

  while ((c < 49 || c > 54) && c != 27)
  {
    printf("╒════════════════════════════╕\n"
           "│    1 : Return              │\n"
           "╞════════════════════════════╡\n"
           "│    2 : Number Route        │\n"
           "╞════════════════════════════╡\n"
           "│    3 : Bus Fleet Number    │\n"
           "╞════════════════════════════╡\n"
           "│    4 : Start Time          │\n"
           "╞════════════════════════════╡\n"
           "│    5 : End Time            │\n"
           "╞════════════════════════════╡\n"
           "│    6 : Route KM            │\n"
           "╘════════════════════════════╛\n");
    k = getchar();
    //while (k != '\n') {
      c = k -48;
      putchar (k);
    //  k = getchar();
    //}
    putchar ('\n');
    fflush(stdin);
  }
  return c;
} // End of 'MenuSortD' function

// The function of the main menu
void main( void )
{
  int Selection;

 while ((Selection = Menu()) != 48 && Selection != 27)
    switch (Selection) {
        case 49:
          Add();
          break;
        case 50:
          Print();
          Save();
          break;
        case 51:
          Print();
          Load();
          break;
        case 52:
          Print();
          break;
        case 53:
          MenuSortChoice();
          break;
        case 54:
          Del();
          break;
        case 55:
          Change();
          Print();
          break;
    }
} // End the function of the main menu

void TypeSort (void) {
    int Selection;
    
    while ((Selection = MenuSortChoice()) != 48 && Selection != 27)
        switch (Selection) {
            case 49:
            MenuSort();
            break;
            case 50:
            MenuSortD();
            break;
        }
}

// Sorting menu function
void mainsort( void )
{
  int Selection;

  while ((Selection = MenuSort()) != 48 && Selection != 27)
    switch (Selection)
    {
    case 49:
      main();
      break;
    case 50:
      SortNumberRoute();
      break;
    case 51:
      SortBusFleetNumber();
      break;
    case 52:
      SortStartTime();
      break;
    case 53:
      SortEndTime();
      break;
    case 54:
      SortRouteKM();
      break;
    }
} //End sorting menu function

int mainsortD (void) {
    int Selection;
    while ((Selection = MenuSortD()) != 48 && Selection != 27)
    switch (Selection) {
        case 49:
          main();
          break;
        case 50:
          SortNumberRouteUbyvanie();
          break;
        case 51:
          SortBusFleetNumberUbyvanie();
          break;
        case 52:
          SortStartTimeUbyvanie();
          break;
        case 53:
          SortEndTimeUbyvanie();
          break;
        case 54:
          SortRouteKMUbyvanie();
          break;
    }
}
