#include <ncurses.h>
#include <stdio.h>
#include <locale.h>
#include <string.h>

/* Структура для хранения информации про одного человека */
typedef struct tagITEM {
char busstop[20], gps1[9], gps2[9], longitude, latitude;
} ITEM;

/* Массив максимум на 100 остановок */
ITEM Busstop[100];

/* Количество занятых элементов в массиве */
int Number2 = 0;

/* Функция для вывода всех элеиентов */
void Print( void ) {
int i;
initscr();

printw("╔═══╦══════════════════════════════════════════════════╦═══════════╦═══╦═══════════╦═══╗\n"
       "║ N ║                   Busstop name                   ║ GPS long. ║Lon║ GPS leng. ║Len║\n");
for (i = 0; i < Number2; i++) {
  printw("╠═══╬══════════════════════════════════════════════════╬═══════════╬═══╬═══════════╬═══╣\n");
  printf("║%3i║%-50s║%-11s║ %c ║%-11s║ %c ║\n", i + 1, Busstop[i].busstop,
  Busstop[i].gps1, Busstop[i].longitude, Busstop[i].gps2, Busstop[i].latitude);
}
printw("╚═══╩══════════════════════════════════════════════════╩═══════════╩═══╩═══════════╩═══╝\n");
getch();
refresh();
endwin();
} /* End of 'Print' function */

void PagePrint(void) {
int i = 1, page = 10, ch = 0, a;
noecho();
keypad(stdscr, true);
while (ch != 1) {
initscr();
printw("╔═══╦══════════════════════════════════════════════════╦═══════════╦═══╦═══════════╦═══╗\n"
       "║ N ║                   Busstop name                   ║ GPS long. ║Lon║ GPS leng. ║Len║\n");
for (i--; i <= page; i++) {
  printw("╠═══╬══════════════════════════════════════════════════╬═══════════╬═══╬═══════════╬═══╣\n");
  printf("║%3i║%-50s║%-11s║ %c ║%-11s║ %c ║\n", i + 1, Busstop[i].busstop,
  Busstop[i].gps1, Busstop[i].longitude, Busstop[i].gps2, Busstop[i].latitude);
}
printw("╚═══╩══════════════════════════════════════════════════╩═══════════╩═══╩═══════════╩═══╝\n");
printw ("Last page - LEFT (<-) | Next page - RIGHT (->) | Exit - BACKSPACE\n");
a = getch();
  if (a == KEY_LEFT) {
    if (i > 11) {
      i -= 20;
      page -= 10;
      ch = 0;
    } else if (i == 11) {
      i = 91;
      page = 100;
      ch = 0;
    }
    clear();
    refresh();
    endwin();
  }
  if (a == KEY_RIGHT) {
    if (i >= 100) {
      i = 1;
      page = 10;
      ch = 0;
    } else {
      page += 10;
      ch = 0;
    }
    clear();
    refresh();
    endwin();
  }
  if (a == KEY_BACKSPACE) {
    ch = 1;
  }
}
getch();
refresh();
endwin();
} /* End of 'Print' function */


/* Функция для добавления элемента */
void Add( void ) {
  initscr();
  echo();
  keypad(stdscr, true);
  char a, k;
  int i = 0, Curr = 1;
  if (Number2 == 99) {
    printw("Невозможно добавить еще один элемент\n");
    return;
  }
  a = getch();
  printw ("╔══════════════════════════╗\n"
          "║   Enter busstop name >   ║\n"
          "╚══════════════════════════╝\n");
a = getch();
for (i = 0; (a != '\n' && i<50); i++) {
Busstop[Number2].busstop[i] = a;
a = getch();
}
Busstop[Number2].busstop[i] = '\0';
printw ("╔══════════════════════════╗\n");
printw ("║   Enter GPS Longitude >  ║\n");
printw ("╚══════════════════════════╝\n");
a = getch();
for (i = 0; (a != '\n' && i<9); i++) {
Busstop[Number2].gps1[i] = a;
a = getch();
printw ("%s\n", Busstop[Number2].gps1);
printw ("%d\n", i);
}
Busstop[Number2].gps1[i] = '\0';
printw ("%s\n", Busstop[Number2].gps1);
i = 0;
refresh();
endwin();
initscr();
  do {
     if (Curr == 1) {
         printw("╔═════════════════════════════════════════╗\n"
                "║          Select the longitude:          ║\n"
                "╠═══════════════════╦╦════════════════════╣\n"
                "║  1 - Western  <<  ║║   2 - Eastern      ║\n"
                "╚═══════════════════╩╩════════════════════╝\n");
     }
     if (Curr == 2) {
         printw("╔═════════════════════════════════════════╗\n"
                "║          Select the longitude:          ║\n"
                "╠═══════════════════╦╦════════════════════╣\n"
                "║  1 - Western      ║║   2 - Eastern  <<  ║\n"
                "╚═══════════════════╩╩════════════════════╝\n");
     }
     printw ("\n");
        k = getch();
        if (k == KEY_LEFT) {
           if (Curr == 2) Curr = 1;
                else Curr++;
        }
        clear();
        if (k == KEY_RIGHT) {
           if (Curr == 1) Curr = 2;
                else Curr--;
        }
        clear();
    } while (k != 10);
    if (Curr == 1) {
	    Busstop[Number2].longitude = 'W';
    } else Busstop[Number2].longitude = 'E';
    getch();
    refresh();
    endwin();
initscr();
a = getch();
printw ("╔══════════════════════════╗\n");
printw ("║   Enter GPS Longitude >  ║\n");
printw ("╚══════════════════════════╝\n");
do {
a = getch();
if(a != '\n' && a != '\t') { //&& i < 10) {
Busstop[Number2].gps1[i++] = a;
}
}
while(a != '\n');
Busstop[Number2].gps1[i] = 0;
Curr = 1;
do {
     if (Curr == 1) {
         printw("╔══════════════════════════════════════════╗\n"
                "║            Select the latitude:          ║\n"
                "╠════════════════════╦╦════════════════════╣\n"
                "║  1 - Northern  <<  ║║   2 - Southern     ║\n"
                "╚════════════════════╩╩════════════════════╝\n");
     }
     if (Curr == 2) {
         printw("╔═══════════════════════════════════════════╗\n"
                "║            Select the latitude:           ║\n"
                "╠════════════════════╦╦═════════════════════╣\n"
                "║  1 - Northern      ║║   2 - Southern  <<  ║\n"
                "╚════════════════════╩╩═════════════════════╝\n");
     }
     printw ("\n");
        k = getch();
        if (k == KEY_LEFT) {
           if (Curr == 2) Curr = 1;
                else Curr++;
        }
        clear();
        if (k == KEY_RIGHT) {
           if (Curr == 1) Curr = 2;
                else Curr--;
        }
        clear();
    } while (k != 10);
    if (Curr == 1) {
            Busstop[Number2].latitude = 'W';
    } else Busstop[Number2].latitude = 'E';

    getch();
    refresh();
    endwin();

Number2 ++;
} /* End of 'Add' function */

/* Функция для удаления элемента */
void Del( void ) {

  char i; //Setting the counter
  char d, dt;

  initscr();
  noecho();
  keypad(stdscr, true);

  Print();

  printw("Enter the number of the item to delete > \n");
  i = getch();
      i = i - 48;
      //putchar(d);
  if (i < 0 || i > Number2) {
    printw("The element with the number %i does not exist\n", i);
    return;
  }

  

  for (i--; i < Number2 - 1; i++)
    Busstop[i] = Busstop[i + 1];

  Number2--;
  getch();
  Print();
  refresh();
  endwin();
} // End of 'Del' function

/* Функция для упорядочивания массива по фамилии */
void Sort( void )
{
int i, j;
ITEM Temp;

for (j = Number2 - 1; j > 0; j--)
for (i = 0; i < j; i ++)
if (strcmp(Busstop[i].busstop, Busstop[i + 1].busstop) > 0)
{
Temp = Busstop[i];
Busstop[i] = Busstop[i + 1];
Busstop[i + 1] = Temp;
}
} /* End of 'Sort' function */

int Menu() {

  setlocale(LC_ALL, "");

  int c = 0, k = 0;
  int i = 0, Curr = 0;
  initscr();
  noecho();
  keypad(stdscr, true);
  do {
	    if (Curr == 0) {
              printw (
              "╒═════════════════════════════╕\n"
              "│    0 : Exit          <<<    │\n"
              "╞═════════════════════════════╡\n");
            } else {
              printw (
              "╒═════════════════════════════╕\n"
              "│    0 : Exit                 │\n"
              "╞═════════════════════════════╡\n");
	    }
	    if (Curr == 1) {
              printw (
              "│    1 : Add           <<<    │\n"
              "╞═════════════════════════════╡\n");
            } else {
              printw (
              "│    1 : Add                  │\n"
              "╞═════════════════════════════╡\n");
            }
	    if (Curr == 2) {
              printw (
              "│    2 : Save in file  <<<    │\n"
              "╞═════════════════════════════╡\n");
            } else {
              printw (
              "│    2 : Save in file         │\n"
              "╞═════════════════════════════╡\n");
            }
            if (Curr == 3) {
              printw (
              "│    3 : Download      <<<    │\n"
              "╞═════════════════════════════╡\n");
            } else {
              printw (
              "│    3 : Download             │\n"
              "╞═════════════════════════════╡\n");
            }
	    if (Curr == 4) {
              printw (
              "│    4 : Print         <<<    │\n"
              "╞═════════════════════════════╡\n");
            } else {
              printw (
              "│    4 : Print                │\n"
              "╞═════════════════════════════╡\n");
            }
	    if (Curr == 5) {
              printw (
              "│    5 : Sort          <<<    │\n"
              "╞═════════════════════════════╡\n");
            } else {
              printw (
              "│    5 : Sort                 │\n"
              "╞═════════════════════════════╡\n");
            }
	    if (Curr == 6) {
              printw (
              "│    6 : Delete        <<<    │\n"
              "╞═════════════════════════════╡\n");
            } else {
              printw (
              "│    6 : Delete               │\n"
              "╞═════════════════════════════╡\n");
            }
	    if (Curr == 7) {
              printw (
              "│    7 : Change        <<<    │\n"
              "╘═════════════════════════════╛\n");
            } else {
              printw (
              "│    7 : Change               │\n"
              "╘═════════════════════════════╛\n");
            }
	    if (Curr == 8) {
              printw (
              "│    8 : Found about   <<<    │\n"
              "╘═════════════════════════════╛\n");
            } else {
              printw (
              "│    8 : Found about          │\n"
              "╘═════════════════════════════╛\n");
            }
	    if (Curr == 9) {
              printw (
              "│    9 : Found         <<<    │\n"
              "╘═════════════════════════════╛\n");
            } else {
              printw (
              "│    9 : Found                │\n"
              "╘═════════════════════════════╛\n");
            }
	    if (Curr == 10) {
              printw (
              "│   10 : Delete about  <<<    │\n"
              "╘═════════════════════════════╛\n");
            } else {
              printw (
              "│   10 : Delete about         │\n"
              "╘═════════════════════════════╛\n");
            }
            if (Curr == 11) {
              printw (
              "│   11 : Page Print    <<<    │\n"
              "╘═════════════════════════════╛\n");
            } else {
              printw (
              "│   11 : Page Print           │\n"
              "╘═════════════════════════════╛\n");
            }
     	 printw("\n");

  k = getch();
    if (k == KEY_DOWN) {
            if (Curr == 11) Curr = 0;
            else Curr++;
            }
            clear();
    if (k == KEY_UP) {
	    if (Curr == 0) Curr = 11;
            else Curr--;
            }
            clear();

    } while (k != 10);
  getch();
  refresh();
  endwin();
  return Curr;
}

int main( void ) {
  int Selection;

 while ((Selection = Menu()) != 48 && Selection != 27) {
    switch (Selection) {
        case 0:
          return 0;
          break;
        case 1:
          Add();
          break;
        //case 2:
        //  Save();
        //  break;
        //case 3:
        //  Load();
        //  break;
        case 4:
          Print();
          break;
        //case 5:
        //  MenuSortChoice();
        //  break;
        case 6:
          Del();
          break;
        //case 7:
        //  Change();
        //  break;
	//case 8:
	//  FoundAbout();
	//  break;
	//case 9:
	//  Found();
	//  break;
	//case 10:
	//  DelAbout();
	//  break;
	case 11:
	  PagePrint();
	  break;
    }
}
} // End the function of the main menu
